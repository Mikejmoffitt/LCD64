library ieee;
use ieee.std_logic_1164.all;

entity gamma_curver is:
port (
	sig_in: in std_logic_vector(7 downto 0);
	sig_out: out std_logic_vector(7 downto 0));
end entity;

architecture behavioral of gamma_curver is
begin
	do_lookup: process
	begin
		case SEL is
			when X"0" => sig_out <= X"0";
			when X"1" => sig_out <= X"0";
			when X"2" => sig_out <= X"0";
			when X"3" => sig_out <= X"0";
			when X"4" => sig_out <= X"0";
			when X"5" => sig_out <= X"0";
			when X"6" => sig_out <= X"0";
			when X"7" => sig_out <= X"0";
			when X"8" => sig_out <= X"0";
			when X"9" => sig_out <= X"0";
			when X"A" => sig_out <= X"0";
			when X"B" => sig_out <= X"0";
			when X"C" => sig_out <= X"0";
			when X"D" => sig_out <= X"0";
			when X"E" => sig_out <= X"0";
			when X"F" => sig_out <= X"0";
			when X"10" => sig_out <= X"0";
			when X"11" => sig_out <= X"0";
			when X"12" => sig_out <= X"0";
			when X"13" => sig_out <= X"0";
			when X"14" => sig_out <= X"0";
			when X"15" => sig_out <= X"0";
			when X"16" => sig_out <= X"0";
			when X"17" => sig_out <= X"0";
			when X"18" => sig_out <= X"0";
			when X"19" => sig_out <= X"0";
			when X"1A" => sig_out <= X"0";
			when X"1B" => sig_out <= X"0";
			when X"1C" => sig_out <= X"1";
			when X"1D" => sig_out <= X"1";
			when X"1E" => sig_out <= X"1";
			when X"1F" => sig_out <= X"1";
			when X"20" => sig_out <= X"1";
			when X"21" => sig_out <= X"1";
			when X"22" => sig_out <= X"1";
			when X"23" => sig_out <= X"1";
			when X"24" => sig_out <= X"1";
			when X"25" => sig_out <= X"1";
			when X"26" => sig_out <= X"1";
			when X"27" => sig_out <= X"1";
			when X"28" => sig_out <= X"1";
			when X"29" => sig_out <= X"2";
			when X"2A" => sig_out <= X"2";
			when X"2B" => sig_out <= X"2";
			when X"2C" => sig_out <= X"2";
			when X"2D" => sig_out <= X"2";
			when X"2E" => sig_out <= X"2";
			when X"2F" => sig_out <= X"2";
			when X"30" => sig_out <= X"2";
			when X"31" => sig_out <= X"3";
			when X"32" => sig_out <= X"3";
			when X"33" => sig_out <= X"3";
			when X"34" => sig_out <= X"3";
			when X"35" => sig_out <= X"3";
			when X"36" => sig_out <= X"3";
			when X"37" => sig_out <= X"3";
			when X"38" => sig_out <= X"4";
			when X"39" => sig_out <= X"4";
			when X"3A" => sig_out <= X"4";
			when X"3B" => sig_out <= X"4";
			when X"3C" => sig_out <= X"4";
			when X"3D" => sig_out <= X"5";
			when X"3E" => sig_out <= X"5";
			when X"3F" => sig_out <= X"5";
			when X"40" => sig_out <= X"5";
			when X"41" => sig_out <= X"6";
			when X"42" => sig_out <= X"6";
			when X"43" => sig_out <= X"6";
			when X"44" => sig_out <= X"6";
			when X"45" => sig_out <= X"7";
			when X"46" => sig_out <= X"7";
			when X"47" => sig_out <= X"7";
			when X"48" => sig_out <= X"7";
			when X"49" => sig_out <= X"8";
			when X"4A" => sig_out <= X"8";
			when X"4B" => sig_out <= X"8";
			when X"4C" => sig_out <= X"9";
			when X"4D" => sig_out <= X"9";
			when X"4E" => sig_out <= X"9";
			when X"4F" => sig_out <= X"A";
			when X"50" => sig_out <= X"A";
			when X"51" => sig_out <= X"A";
			when X"52" => sig_out <= X"B";
			when X"53" => sig_out <= X"B";
			when X"54" => sig_out <= X"B";
			when X"55" => sig_out <= X"C";
			when X"56" => sig_out <= X"C";
			when X"57" => sig_out <= X"D";
			when X"58" => sig_out <= X"D";
			when X"59" => sig_out <= X"D";
			when X"5A" => sig_out <= X"E";
			when X"5B" => sig_out <= X"E";
			when X"5C" => sig_out <= X"F";
			when X"5D" => sig_out <= X"F";
			when X"5E" => sig_out <= X"10";
			when X"5F" => sig_out <= X"10";
			when X"60" => sig_out <= X"11";
			when X"61" => sig_out <= X"11";
			when X"62" => sig_out <= X"12";
			when X"63" => sig_out <= X"12";
			when X"64" => sig_out <= X"13";
			when X"65" => sig_out <= X"13";
			when X"66" => sig_out <= X"14";
			when X"67" => sig_out <= X"14";
			when X"68" => sig_out <= X"15";
			when X"69" => sig_out <= X"15";
			when X"6A" => sig_out <= X"16";
			when X"6B" => sig_out <= X"16";
			when X"6C" => sig_out <= X"17";
			when X"6D" => sig_out <= X"18";
			when X"6E" => sig_out <= X"18";
			when X"6F" => sig_out <= X"19";
			when X"70" => sig_out <= X"19";
			when X"71" => sig_out <= X"1A";
			when X"72" => sig_out <= X"1B";
			when X"73" => sig_out <= X"1B";
			when X"74" => sig_out <= X"1C";
			when X"75" => sig_out <= X"1D";
			when X"76" => sig_out <= X"1D";
			when X"77" => sig_out <= X"1E";
			when X"78" => sig_out <= X"1F";
			when X"79" => sig_out <= X"20";
			when X"7A" => sig_out <= X"20";
			when X"7B" => sig_out <= X"21";
			when X"7C" => sig_out <= X"22";
			when X"7D" => sig_out <= X"23";
			when X"7E" => sig_out <= X"23";
			when X"7F" => sig_out <= X"24";
			when X"80" => sig_out <= X"25";
			when X"81" => sig_out <= X"26";
			when X"82" => sig_out <= X"27";
			when X"83" => sig_out <= X"27";
			when X"84" => sig_out <= X"28";
			when X"85" => sig_out <= X"29";
			when X"86" => sig_out <= X"2A";
			when X"87" => sig_out <= X"2B";
			when X"88" => sig_out <= X"2C";
			when X"89" => sig_out <= X"2D";
			when X"8A" => sig_out <= X"2E";
			when X"8B" => sig_out <= X"2F";
			when X"8C" => sig_out <= X"30";
			when X"8D" => sig_out <= X"31";
			when X"8E" => sig_out <= X"32";
			when X"8F" => sig_out <= X"32";
			when X"90" => sig_out <= X"33";
			when X"91" => sig_out <= X"34";
			when X"92" => sig_out <= X"36";
			when X"93" => sig_out <= X"37";
			when X"94" => sig_out <= X"38";
			when X"95" => sig_out <= X"39";
			when X"96" => sig_out <= X"3A";
			when X"97" => sig_out <= X"3B";
			when X"98" => sig_out <= X"3C";
			when X"99" => sig_out <= X"3D";
			when X"9A" => sig_out <= X"3E";
			when X"9B" => sig_out <= X"3F";
			when X"9C" => sig_out <= X"40";
			when X"9D" => sig_out <= X"42";
			when X"9E" => sig_out <= X"43";
			when X"9F" => sig_out <= X"44";
			when X"A0" => sig_out <= X"45";
			when X"A1" => sig_out <= X"46";
			when X"A2" => sig_out <= X"48";
			when X"A3" => sig_out <= X"49";
			when X"A4" => sig_out <= X"4A";
			when X"A5" => sig_out <= X"4B";
			when X"A6" => sig_out <= X"4D";
			when X"A7" => sig_out <= X"4E";
			when X"A8" => sig_out <= X"4F";
			when X"A9" => sig_out <= X"51";
			when X"AA" => sig_out <= X"52";
			when X"AB" => sig_out <= X"53";
			when X"AC" => sig_out <= X"55";
			when X"AD" => sig_out <= X"56";
			when X"AE" => sig_out <= X"57";
			when X"AF" => sig_out <= X"59";
			when X"B0" => sig_out <= X"5A";
			when X"B1" => sig_out <= X"5C";
			when X"B2" => sig_out <= X"5D";
			when X"B3" => sig_out <= X"5F";
			when X"B4" => sig_out <= X"60";
			when X"B5" => sig_out <= X"62";
			when X"B6" => sig_out <= X"63";
			when X"B7" => sig_out <= X"65";
			when X"B8" => sig_out <= X"66";
			when X"B9" => sig_out <= X"68";
			when X"BA" => sig_out <= X"69";
			when X"BB" => sig_out <= X"6B";
			when X"BC" => sig_out <= X"6D";
			when X"BD" => sig_out <= X"6E";
			when X"BE" => sig_out <= X"70";
			when X"BF" => sig_out <= X"72";
			when X"C0" => sig_out <= X"73";
			when X"C1" => sig_out <= X"75";
			when X"C2" => sig_out <= X"77";
			when X"C3" => sig_out <= X"78";
			when X"C4" => sig_out <= X"7A";
			when X"C5" => sig_out <= X"7C";
			when X"C6" => sig_out <= X"7E";
			when X"C7" => sig_out <= X"7F";
			when X"C8" => sig_out <= X"81";
			when X"C9" => sig_out <= X"83";
			when X"CA" => sig_out <= X"85";
			when X"CB" => sig_out <= X"87";
			when X"CC" => sig_out <= X"89";
			when X"CD" => sig_out <= X"8A";
			when X"CE" => sig_out <= X"8C";
			when X"CF" => sig_out <= X"8E";
			when X"D0" => sig_out <= X"90";
			when X"D1" => sig_out <= X"92";
			when X"D2" => sig_out <= X"94";
			when X"D3" => sig_out <= X"96";
			when X"D4" => sig_out <= X"98";
			when X"D5" => sig_out <= X"9A";
			when X"D6" => sig_out <= X"9C";
			when X"D7" => sig_out <= X"9E";
			when X"D8" => sig_out <= X"A0";
			when X"D9" => sig_out <= X"A2";
			when X"DA" => sig_out <= X"A4";
			when X"DB" => sig_out <= X"A7";
			when X"DC" => sig_out <= X"A9";
			when X"DD" => sig_out <= X"AB";
			when X"DE" => sig_out <= X"AD";
			when X"DF" => sig_out <= X"AF";
			when X"E0" => sig_out <= X"B1";
			when X"E1" => sig_out <= X"B4";
			when X"E2" => sig_out <= X"B6";
			when X"E3" => sig_out <= X"B8";
			when X"E4" => sig_out <= X"BA";
			when X"E5" => sig_out <= X"BD";
			when X"E6" => sig_out <= X"BF";
			when X"E7" => sig_out <= X"C1";
			when X"E8" => sig_out <= X"C4";
			when X"E9" => sig_out <= X"C6";
			when X"EA" => sig_out <= X"C8";
			when X"EB" => sig_out <= X"CB";
			when X"EC" => sig_out <= X"CD";
			when X"ED" => sig_out <= X"D0";
			when X"EE" => sig_out <= X"D2";
			when X"EF" => sig_out <= X"D5";
			when X"F0" => sig_out <= X"D7";
			when X"F1" => sig_out <= X"DA";
			when X"F2" => sig_out <= X"DC";
			when X"F3" => sig_out <= X"DF";
			when X"F4" => sig_out <= X"E1";
			when X"F5" => sig_out <= X"E4";
			when X"F6" => sig_out <= X"E7";
			when X"F7" => sig_out <= X"E9";
			when X"F8" => sig_out <= X"EC";
			when X"F9" => sig_out <= X"EF";
			when X"FA" => sig_out <= X"F1";
			when X"FB" => sig_out <= X"F4";
			when X"FC" => sig_out <= X"F7";
			when X"FD" => sig_out <= X"F9";
			when X"FE" => sig_out <= X"FC";
		end case;
	end process;
end architecture;
